{
  "filePath": "./src/components/reorder-group/reorder-group.tsx",
  "encapsulation": "none",
  "tag": "ion-reorder-group",
  "readme": "# ion-reorder-group\n\nThe reorder group is a wrapper component for items using the `ion-reorder` component. See the [Reorder documentation](../reorder/) for further information about the anchor component that is used to drag items within the `ion-reorder-group`.\n\nOnce the user drags an item and drops it in a new position, the `ionItemReorder` event is dispatched. A handler for it should be implemented that calls the `complete()` method.\n\nThe `detail` property of the `ionItemReorder` event includes all of the relevant information about the reorder operation, including the `from` and `to` indexes. In the context of reordering, an item moves `from` an index `to` a new index.\n\n",
  "docs": "The reorder group is a wrapper component for items using the `ion-reorder` component. See the [Reorder documentation](../reorder/) for further information about the anchor component that is used to drag items within the `ion-reorder-group`.\n\nOnce the user drags an item and drops it in a new position, the `ionItemReorder` event is dispatched. A handler for it should be implemented that calls the `complete()` method.\n\nThe `detail` property of the `ionItemReorder` event includes all of the relevant information about the reorder operation, including the `from` and `to` indexes. In the context of reordering, an item moves `from` an index `to` a new index.",
  "docsTags": [],
  "usage": {
    "angular": "```html\n<!-- The reorder gesture is disabled by default, enable it to drag and drop items -->\n<ion-reorder-group (ionItemReorder)=\"doReorder($event)\" disabled=\"false\">\n  <!-- Default reorder icon, end aligned items -->\n  <ion-item>\n    <ion-label>\n      Item 1\n    </ion-label>\n    <ion-reorder slot=\"end\"></ion-reorder>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>\n      Item 2\n    </ion-label>\n    <ion-reorder slot=\"end\"></ion-reorder>\n  </ion-item>\n\n  <!-- Default reorder icon, start aligned items -->\n  <ion-item>\n    <ion-reorder slot=\"start\"></ion-reorder>\n    <ion-label>\n      Item 3\n    </ion-label>\n  </ion-item>\n\n  <ion-item>\n    <ion-reorder slot=\"start\"></ion-reorder>\n    <ion-label>\n      Item 4\n    </ion-label>\n  </ion-item>\n\n  <!-- Custom reorder icon end items -->\n  <ion-item>\n    <ion-label>\n      Item 5\n    </ion-label>\n    <ion-reorder slot=\"end\">\n      <ion-icon name=\"pizza\"></ion-icon>\n    </ion-reorder>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>\n      Item 6\n    </ion-label>\n    <ion-reorder slot=\"end\">\n      <ion-icon name=\"pizza\"></ion-icon>\n    </ion-reorder>\n  </ion-item>\n\n  <!-- Items wrapped in a reorder, entire item can be dragged -->\n  <ion-reorder>\n    <ion-item>\n      <ion-label>\n        Item 7\n      </ion-label>\n    </ion-item>\n  </ion-reorder>\n\n  <ion-reorder>\n    <ion-item>\n      <ion-label>\n        Item 8\n      </ion-label>\n    </ion-item>\n  </ion-reorder>\n</ion-reorder-group>\n```\n\n```javascript\nimport { Component, ViewChild } from '@angular/core';\nimport { IonReorderGroup } from '@ionic/angular';\n\n@Component({\n  selector: 'reorder-group-example',\n  templateUrl: 'reorder-group-example.html',\n  styleUrls: ['./reorder-group-example.css']\n})\nexport class ReorderGroupExample {\n  @ViewChild(IonReorderGroup) reorderGroup: IonReorderGroup;\n\n  constructor() {}\n\n  doReorder(ev: any) {\n    // The `from` and `to` properties contain the index of the item\n    // when the drag started and ended, respectively\n    console.log('Dragged from index', ev.detail.from, 'to', ev.detail.to);\n\n    // Finish the reorder and position the item in the DOM based on\n    // where the gesture ended. This method can also be called directly\n    // by the reorder group\n    ev.detail.complete();\n  }\n\n  toggleReorderGroup() {\n    this.reorderGroup.disabled = !this.reorderGroup.disabled;\n  }\n}\n```\n\n### Updating Data\n\n```javascript\nimport { Component, ViewChild } from '@angular/core';\nimport { IonReorderGroup } from '@ionic/angular';\n\n@Component({\n  selector: 'reorder-group-example',\n  templateUrl: 'reorder-group-example.html',\n  styleUrls: ['./reorder-group-example.css']\n})\nexport class ReorderGroupExample {\n  items = [1, 2, 3, 4, 5];\n\n  @ViewChild(IonReorderGroup) reorderGroup: IonReorderGroup;\n\n  constructor() {}\n\n  doReorder(ev: any) {\n    // Before complete is called with the items they will remain in the\n    // order before the drag\n    console.log('Before complete', this.items);\n\n    // Finish the reorder and position the item in the DOM based on\n    // where the gesture ended. Update the items variable to the\n    // new order of items\n    this.items = ev.detail.complete(this.items);\n\n    // After complete is called the items will be in the new order\n    console.log('After complete', this.items);\n  }\n}\n```\n",
    "javascript": "```html\n<!-- The reorder gesture is disabled by default, enable it to drag and drop items -->\n<ion-reorder-group disabled=\"false\">\n  <!-- Default reorder icon, end aligned items -->\n  <ion-item>\n    <ion-label>\n      Item 1\n    </ion-label>\n    <ion-reorder slot=\"end\"></ion-reorder>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>\n      Item 2\n    </ion-label>\n    <ion-reorder slot=\"end\"></ion-reorder>\n  </ion-item>\n\n  <!-- Default reorder icon, start aligned items -->\n  <ion-item>\n    <ion-reorder slot=\"start\"></ion-reorder>\n    <ion-label>\n      Item 3\n    </ion-label>\n  </ion-item>\n\n  <ion-item>\n    <ion-reorder slot=\"start\"></ion-reorder>\n    <ion-label>\n      Item 4\n    </ion-label>\n  </ion-item>\n\n  <!-- Custom reorder icon end items -->\n  <ion-item>\n    <ion-label>\n      Item 5\n    </ion-label>\n    <ion-reorder slot=\"end\">\n      <ion-icon name=\"pizza\"></ion-icon>\n    </ion-reorder>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>\n      Item 6\n    </ion-label>\n    <ion-reorder slot=\"end\">\n      <ion-icon name=\"pizza\"></ion-icon>\n    </ion-reorder>\n  </ion-item>\n\n  <!-- Items wrapped in a reorder, entire item can be dragged -->\n  <ion-reorder>\n    <ion-item>\n      <ion-label>\n        Item 7\n      </ion-label>\n    </ion-item>\n  </ion-reorder>\n\n  <ion-reorder>\n    <ion-item>\n      <ion-label>\n        Item 8\n      </ion-label>\n    </ion-item>\n  </ion-reorder>\n</ion-reorder-group>\n```\n\n```javascript\nconst reorderGroup = document.querySelector('ion-reorder-group');\n\nreorderGroup.addEventListener('ionItemReorder', ({detail}) => {\n  // The `from` and `to` properties contain the index of the item\n  // when the drag started and ended, respectively\n  console.log('Dragged from index', detail.from, 'to', detail.to);\n\n  // Finish the reorder and position the item in the DOM based on\n  // where the gesture ended. This method can also be called directly\n  // by the reorder group\n  detail.complete();\n});\n```\n\n### Updating Data\n\n```javascript\nconst items = [1, 2, 3, 4, 5];\nconst reorderGroup = document.querySelector('ion-reorder-group');\n\nreorderGroup.addEventListener('ionItemReorder', ({detail}) => {\n  // Before complete is called with the items they will remain in the\n  // order before the drag\n  console.log('Before complete', items);\n\n  // Finish the reorder and position the item in the DOM based on\n  // where the gesture ended. Update the items variable to the\n  // new order of items\n  items = detail.complete(items);\n\n  // After complete is called the items will be in the new order\n  console.log('After complete', items);\n});\n```\n",
    "react": "```tsx\nimport React from 'react';\nimport { IonItem, IonLabel, IonReorder, IonReorderGroup, IonIcon, IonContent } from '@ionic/react';\nimport { ItemReorderEventDetail } from '@ionic/core';\nimport { pizza } from 'ionicons/icons';\n\nfunction doReorder(event: CustomEvent<ItemReorderEventDetail>) {\n  // The `from` and `to` properties contain the index of the item\n  // when the drag started and ended, respectively\n  console.log('Dragged from index', event.detail.from, 'to', event.detail.to);\n\n  // Finish the reorder and position the item in the DOM based on\n  // where the gesture ended. This method can also be called directly\n  // by the reorder group\n  event.detail.complete();\n}\n\nexport const ReorderGroupExample: React.FC = () => (\n  <IonContent>\n    {/*-- The reorder gesture is disabled by default, enable it to drag and drop items --*/}\n    <IonReorderGroup disabled={false} onIonItemReorder={doReorder}>\n      {/*-- Default reorder icon, end aligned items --*/}\n      <IonItem>\n        <IonLabel>Item 1</IonLabel>\n        <IonReorder slot=\"end\" />\n      </IonItem>\n\n      <IonItem>\n        <IonLabel>Item 2</IonLabel>\n        <IonReorder slot=\"end\" />\n      </IonItem>\n\n      {/*-- Default reorder icon, start aligned items --*/}\n      <IonItem>\n        <IonReorder slot=\"start\" />\n        <IonLabel>Item 3</IonLabel>\n      </IonItem>\n\n      <IonItem>\n        <IonReorder slot=\"start\" />\n        <IonLabel>Item 4</IonLabel>\n      </IonItem>\n\n      {/*-- Custom reorder icon end items --*/}\n      <IonItem>\n        <IonLabel>Item 5</IonLabel>\n        <IonReorder slot=\"end\">\n          <IonIcon icon={pizza} />\n        </IonReorder>\n      </IonItem>\n\n      <IonItem>\n        <IonLabel>Item 6</IonLabel>\n        <IonReorder slot=\"end\">\n          <IonIcon icon={pizza} />\n        </IonReorder>\n      </IonItem>\n\n      {/*-- Items wrapped in a reorder, entire item can be dragged --*/}\n      <IonReorder>\n        <IonItem>\n          <IonLabel>Item 7</IonLabel>\n        </IonItem>\n      </IonReorder>\n\n      <IonReorder>\n        <IonItem>\n          <IonLabel>Item 8</IonLabel>\n        </IonItem>\n      </IonReorder>\n    </IonReorderGroup>\n  </IonContent>\n);\n```\n\n### Updating Data\n\n```tsx\nconst items = [1, 2, 3, 4, 5];\n\nfunction doReorder(event: CustomEvent) {\n  // Before complete is called with the items they will remain in the\n  // order before the drag\n  console.log('Before complete', this.items);\n\n  // Finish the reorder and position the item in the DOM based on\n  // where the gesture ended. Update the items variable to the\n  // new order of items\n  this.items = event.detail.complete(this.items);\n\n  // After complete is called the items will be in the new order\n  console.log('After complete', this.items);\n}\n```\n",
    "stencil": "```tsx\nimport { Component, h } from '@stencil/core';\n\n@Component({\n  tag: 'reorder-group-example',\n  styleUrl: 'reorder-group-example.css'\n})\nexport class ReorderGroupExample {\n  doReorder(ev: any) {\n    // The `from` and `to` properties contain the index of the item\n    // when the drag started and ended, respectively\n    console.log('Dragged from index', ev.detail.from, 'to', ev.detail.to);\n\n    // Finish the reorder and position the item in the DOM based on\n    // where the gesture ended. This method can also be called directly\n    // by the reorder group\n    ev.detail.complete();\n  }\n\n  render() {\n    return [\n      // The reorder gesture is disabled by default, enable it to drag and drop items\n      <ion-reorder-group onIonItemReorder={(ev) => this.doReorder(ev)} disabled={false}>\n        {/* Default reorder icon, end aligned items */}\n        <ion-item>\n          <ion-label>\n            Item 1\n          </ion-label>\n          <ion-reorder slot=\"end\"></ion-reorder>\n        </ion-item>\n\n        <ion-item>\n          <ion-label>\n            Item 2\n          </ion-label>\n          <ion-reorder slot=\"end\"></ion-reorder>\n        </ion-item>\n\n        {/* Default reorder icon, start aligned items */}\n        <ion-item>\n          <ion-reorder slot=\"start\"></ion-reorder>\n          <ion-label>\n            Item 3\n          </ion-label>\n        </ion-item>\n\n        <ion-item>\n          <ion-reorder slot=\"start\"></ion-reorder>\n          <ion-label>\n            Item 4\n          </ion-label>\n        </ion-item>\n\n        {/* Custom reorder icon end items */}\n        <ion-item>\n          <ion-label>\n            Item 5\n          </ion-label>\n          <ion-reorder slot=\"end\">\n            <ion-icon name=\"pizza\"></ion-icon>\n          </ion-reorder>\n        </ion-item>\n\n        <ion-item>\n          <ion-label>\n            Item 6\n          </ion-label>\n          <ion-reorder slot=\"end\">\n            <ion-icon name=\"pizza\"></ion-icon>\n          </ion-reorder>\n        </ion-item>\n\n        {/* Items wrapped in a reorder, entire item can be dragged */}\n        <ion-reorder>\n          <ion-item>\n            <ion-label>\n              Item 7\n            </ion-label>\n          </ion-item>\n        </ion-reorder>\n\n        <ion-reorder>\n          <ion-item>\n            <ion-label>\n              Item 8\n            </ion-label>\n          </ion-item>\n        </ion-reorder>\n      </ion-reorder-group>\n    ]\n  }\n}\n```\n\n### Updating Data\n\n```tsx\nimport { Component, State, h } from '@stencil/core';\n\n@Component({\n  tag: 'reorder-group-example',\n  styleUrl: 'reorder-group-example.css'\n})\nexport class ReorderGroupExample {\n  @State() items = [1, 2, 3, 4, 5];\n\n  doReorder(ev: any) {\n    // Before complete is called with the items they will remain in the\n    // order before the drag\n    console.log('Before complete', this.items);\n\n    // Finish the reorder and position the item in the DOM based on\n    // where the gesture ended. Update the items variable to the\n    // new order of items\n    this.items = ev.detail.complete(this.items);\n\n    // After complete is called the items will be in the new order\n    console.log('After complete', this.items);\n  }\n\n  render() {\n    return [\n      // The reorder gesture is disabled by default, enable it to drag and drop items\n      <ion-reorder-group onIonItemReorder={(ev) => this.doReorder(ev)} disabled={false}>\n\n        {this.items.map(item =>\n          <ion-item>\n            <ion-label>\n              Item { item }\n            </ion-label>\n            <ion-reorder slot=\"end\"></ion-reorder>\n          </ion-item>\n        )}\n\n      </ion-reorder-group>\n    ]\n  }\n}\n```",
    "vue": "```html\n<template>\n  <!-- The reorder gesture is disabled by default, enable it to drag and drop items -->\n  <ion-reorder-group @ionItemReorder=\"doReorder($event)\" disabled=\"false\">\n    <!-- Default reorder icon, end aligned items -->\n    <ion-item>\n      <ion-label>\n        Item 1\n      </ion-label>\n      <ion-reorder slot=\"end\"></ion-reorder>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>\n        Item 2\n      </ion-label>\n      <ion-reorder slot=\"end\"></ion-reorder>\n    </ion-item>\n\n    <!-- Default reorder icon, start aligned items -->\n    <ion-item>\n      <ion-reorder slot=\"start\"></ion-reorder>\n      <ion-label>\n        Item 3\n      </ion-label>\n    </ion-item>\n\n    <ion-item>\n      <ion-reorder slot=\"start\"></ion-reorder>\n      <ion-label>\n        Item 4\n      </ion-label>\n    </ion-item>\n\n    <!-- Custom reorder icon end items -->\n    <ion-item>\n      <ion-label>\n        Item 5\n      </ion-label>\n      <ion-reorder slot=\"end\">\n        <ion-icon name=\"pizza\"></ion-icon>\n      </ion-reorder>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>\n        Item 6\n      </ion-label>\n      <ion-reorder slot=\"end\">\n        <ion-icon name=\"pizza\"></ion-icon>\n      </ion-reorder>\n    </ion-item>\n\n    <!-- Items wrapped in a reorder, entire item can be dragged -->\n    <ion-reorder>\n      <ion-item>\n        <ion-label>\n          Item 7\n        </ion-label>\n      </ion-item>\n    </ion-reorder>\n\n    <ion-reorder>\n      <ion-item>\n        <ion-label>\n          Item 8\n        </ion-label>\n      </ion-item>\n    </ion-reorder>\n  </ion-reorder-group>\n</template>\n\n<script lang=\"ts\">\n  import { Component, Vue } from 'vue-property-decorator';\n\n  @Component()\n  export default class Example extends Vue {\n\n    doReorder(event) {\n      // The `from` and `to` properties contain the index of the item\n      // when the drag started and ended, respectively\n      console.log('Dragged from index', event.detail.from, 'to', event.detail.to);\n\n      // Finish the reorder and position the item in the DOM based on\n      // where the gesture ended. This method can also be called directly\n      // by the reorder group\n      event.detail.complete();\n    }\n  }\n</script>\n```\n\n### Updating Data\n\n```html\n<script lang=\"ts\">\n  import { Component, Vue } from 'vue-property-decorator';\n\n  @Component()\n  export default class Example extends Vue {\n    items = [1, 2, 3, 4, 5];\n\n    doReorder(event) {\n      // Before complete is called with the items they will remain in the\n      // order before the drag\n      console.log('Before complete', this.items);\n\n      // Finish the reorder and position the item in the DOM based on\n      // where the gesture ended. Update the items variable to the\n      // new order of items\n      this.items = event.detail.complete(this.items);\n\n      // After complete is called the items will be in the new order\n      console.log('After complete', this.items);\n    }\n  }\n</script>\n```\n"
  },
  "props": [
    {
      "name": "disabled",
      "type": "boolean",
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the reorder will be hidden.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "complete",
      "returns": {
        "type": "Promise<any>",
        "docs": ""
      },
      "signature": "complete(listOrReorder?: boolean | any[] | undefined) => Promise<any>",
      "parameters": [],
      "docs": "Completes the reorder operation. Must be called by the `ionItemReorder` event.\n\nIf a list of items is passed, the list will be reordered and returned in the\nproper order.\n\nIf no parameters are passed or if `true` is passed in, the reorder will complete\nand the item will remain in the position it was dragged to. If `false` is passed,\nthe reorder will complete and the item will bounce back to its original position.",
      "docsTags": [
        {
          "name": "param",
          "text": "listOrReorder A list of items to be sorted and returned in the new order or a\nboolean of whether or not the reorder should reposition the item."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionItemReorder",
      "detail": "ItemReorderEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Event that needs to be listened to in order to complete the reorder action.\nOnce the event has been emitted, the `complete()` method then needs\nto be called in order to finalize the reorder action.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [],
  "slots": [],
  "parts": [],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}