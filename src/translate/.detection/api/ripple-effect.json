{
  "filePath": "./src/components/ripple-effect/ripple-effect.tsx",
  "encapsulation": "shadow",
  "tag": "ion-ripple-effect",
  "readme": "# ion-ripple-effect\n\nThe ripple effect component adds the [Material Design ink ripple interaction effect](https://material.io/develop/web/components/ripples/). This component can only be used inside of an `<ion-app>` and can be added to any component.\n\nIt's important to note that the parent should have [relative positioning](https://developer.mozilla.org/en-US/docs/Web/CSS/position) because the ripple effect is absolutely positioned and will cover the closest parent with relative positioning. The parent element should also be given the `ion-activatable` class, which tells the ripple effect that the element is clickable.\n\nThe default type, `\"bounded\"`, will expand the ripple effect from the click position outwards. To add a ripple effect that always starts in the center of the element and expands in a circle, add an `\"unbounded\"` type. It's recommended to add `overflow: hidden` to the parent element to avoid the ripple overflowing its container, especially with an unbounded ripple.\n",
  "docs": "The ripple effect component adds the [Material Design ink ripple interaction effect](https://material.io/develop/web/components/ripples/). This component can only be used inside of an `<ion-app>` and can be added to any component.\n\nIt's important to note that the parent should have [relative positioning](https://developer.mozilla.org/en-US/docs/Web/CSS/position) because the ripple effect is absolutely positioned and will cover the closest parent with relative positioning. The parent element should also be given the `ion-activatable` class, which tells the ripple effect that the element is clickable.\n\nThe default type, `\"bounded\"`, will expand the ripple effect from the click position outwards. To add a ripple effect that always starts in the center of the element and expands in a circle, add an `\"unbounded\"` type. It's recommended to add `overflow: hidden` to the parent element to avoid the ripple overflowing its container, especially with an unbounded ripple.",
  "docsTags": [],
  "usage": {
    "angular": "```html\n<ion-app>\n  <ion-content>\n    <div class=\"ion-activatable ripple-parent\">\n      A plain div with a bounded ripple effect\n      <ion-ripple-effect></ion-ripple-effect>\n    </div>\n\n    <button class=\"ion-activatable ripple-parent\">\n      A button with a bounded ripple effect\n      <ion-ripple-effect></ion-ripple-effect>\n    </button>\n\n    <div class=\"ion-activatable ripple-parent\">\n      A plain div with an unbounded ripple effect\n      <ion-ripple-effect type=\"unbounded\"></ion-ripple-effect>\n    </div>\n\n    <button class=\"ion-activatable ripple-parent\">\n      A button with an unbounded ripple effect\n      <ion-ripple-effect type=\"unbounded\"></ion-ripple-effect>\n    </button>\n  </ion-content>\n</ion-app>\n```\n\n```css\n.ripple-parent {\n  position: relative;\n  overflow: hidden;\n}\n```",
    "javascript": "```html\n<ion-app>\n  <ion-content>\n    <div class=\"ion-activatable ripple-parent\">\n      A plain div with a bounded ripple effect\n      <ion-ripple-effect></ion-ripple-effect>\n    </div>\n\n    <button class=\"ion-activatable ripple-parent\">\n      A button with a bounded ripple effect\n      <ion-ripple-effect></ion-ripple-effect>\n    </button>\n\n    <div class=\"ion-activatable ripple-parent\">\n      A plain div with an unbounded ripple effect\n      <ion-ripple-effect type=\"unbounded\"></ion-ripple-effect>\n    </div>\n\n    <button class=\"ion-activatable ripple-parent\">\n      A button with an unbounded ripple effect\n      <ion-ripple-effect type=\"unbounded\"></ion-ripple-effect>\n    </button>\n  </ion-content>\n</ion-app>\n```\n\n```css\n.ripple-parent {\n  position: relative;\n  overflow: hidden;\n}\n```",
    "react": "```tsx\nimport React from 'react';\nimport { IonApp, IonContent, IonRippleEffect } from '@ionic/react';\nimport './RippleEffectExample.css';\n\nexport const RippleExample: React.FC = () => (\n  <IonApp>\n   <IonContent>\n      <div className=\"ion-activatable ripple-parent\">\n        A plain div with a bounded ripple effect\n        <IonRippleEffect></IonRippleEffect>\n      </div>\n\n      <button className=\"ion-activatable ripple-parent\">\n        A button with a bounded ripple effect\n        <IonRippleEffect></IonRippleEffect>\n      </button>\n\n      <div className=\"ion-activatable ripple-parent\">\n        A plain div with an unbounded ripple effect\n        <IonRippleEffect type=\"unbounded\"></IonRippleEffect>\n      </div>\n\n      <button className=\"ion-activatable ripple-parent\">\n        A button with an unbounded ripple effect\n        <IonRippleEffect type=\"unbounded\"></IonRippleEffect>\n      </button>\n    </IonContent>\n  </IonApp>\n);\n```\n\n```css\n.ripple-parent {\n  position: relative;\n  overflow: hidden;\n}\n```",
    "stencil": "```tsx\nimport { Component, h } from '@stencil/core';\n\n@Component({\n  tag: 'ripple-effect-example',\n  styleUrl: 'ripple-effect-example.css'\n})\nexport class RippleEffectExample {\n  render() {\n    return [\n      <ion-app>\n        <ion-content>\n          <div class=\"ion-activatable ripple-parent\">\n            A plain div with a bounded ripple effect\n            <ion-ripple-effect></ion-ripple-effect>\n          </div>\n\n          <button class=\"ion-activatable ripple-parent\">\n            A button with a bounded ripple effect\n            <ion-ripple-effect></ion-ripple-effect>\n          </button>\n\n          <div class=\"ion-activatable ripple-parent\">\n            A plain div with an unbounded ripple effect\n            <ion-ripple-effect type=\"unbounded\"></ion-ripple-effect>\n          </div>\n\n          <button class=\"ion-activatable ripple-parent\">\n            A button with an unbounded ripple effect\n            <ion-ripple-effect type=\"unbounded\"></ion-ripple-effect>\n          </button>\n        </ion-content>\n      </ion-app>\n    ];\n  }\n}\n```\n\n```css\n.ripple-parent {\n  position: relative;\n  overflow: hidden;\n}\n```",
    "vue": "```html\n<template>\n  <ion-app>\n    <ion-content>\n      <div class=\"ion-activatable ripple-parent\">\n        A plain div with a bounded ripple effect\n        <ion-ripple-effect></ion-ripple-effect>\n      </div>\n\n      <button class=\"ion-activatable ripple-parent\">\n        A button with a bounded ripple effect\n        <ion-ripple-effect></ion-ripple-effect>\n      </button>\n\n      <div class=\"ion-activatable ripple-parent\">\n        A plain div with an unbounded ripple effect\n        <ion-ripple-effect type=\"unbounded\"></ion-ripple-effect>\n      </div>\n\n      <button class=\"ion-activatable ripple-parent\">\n        A button with an unbounded ripple effect\n        <ion-ripple-effect type=\"unbounded\"></ion-ripple-effect>\n      </button>\n    </ion-content>\n  </ion-app>\n</template>\n\n<style>\n  .ripple-parent {\n    position: relative;\n    overflow: hidden;\n  }\n</style>\n\n<script>\nimport { IonApp, IonContent, IonRippleEffect } from '@ionic/vue';\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  components: { IonApp, IonContent, IonRippleEffect }\n});\n</script>\n```"
  },
  "props": [
    {
      "name": "type",
      "type": "\"bounded\" | \"unbounded\"",
      "mutable": false,
      "attr": "type",
      "reflectToAttr": false,
      "docs": "Sets the type of ripple-effect:\n\n- `bounded`: the ripple effect expands from the user's click position\n- `unbounded`: the ripple effect expands from the center of the button and overflows the container.\n\nNOTE: Surfaces for bounded ripples should have the overflow property set to hidden,\nwhile surfaces for unbounded ripples should have it set to visible.",
      "docsTags": [],
      "default": "'bounded'",
      "values": [
        {
          "value": "bounded",
          "type": "string"
        },
        {
          "value": "unbounded",
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "addRipple",
      "returns": {
        "type": "Promise<() => void>",
        "docs": ""
      },
      "signature": "addRipple(x: number, y: number) => Promise<() => void>",
      "parameters": [],
      "docs": "Adds the ripple effect to the parent element.",
      "docsTags": [
        {
          "name": "param",
          "text": "x The horizontal coordinate of where the ripple should start."
        },
        {
          "name": "param",
          "text": "y The vertical coordinate of where the ripple should start."
        }
      ]
    }
  ],
  "events": [],
  "listeners": [],
  "styles": [],
  "slots": [],
  "parts": [],
  "dependents": [
    "ion-action-sheet",
    "ion-alert",
    "ion-back-button",
    "ion-button",
    "ion-card",
    "ion-chip",
    "ion-fab-button",
    "ion-item",
    "ion-item-option",
    "ion-menu-button",
    "ion-segment-button",
    "ion-tab-button",
    "ion-toast"
  ],
  "dependencies": [],
  "dependencyGraph": {
    "ion-action-sheet": [
      "ion-ripple-effect"
    ],
    "ion-alert": [
      "ion-ripple-effect"
    ],
    "ion-back-button": [
      "ion-ripple-effect"
    ],
    "ion-button": [
      "ion-ripple-effect"
    ],
    "ion-card": [
      "ion-ripple-effect"
    ],
    "ion-chip": [
      "ion-ripple-effect"
    ],
    "ion-fab-button": [
      "ion-ripple-effect"
    ],
    "ion-item": [
      "ion-ripple-effect"
    ],
    "ion-item-option": [
      "ion-ripple-effect"
    ],
    "ion-menu-button": [
      "ion-ripple-effect"
    ],
    "ion-segment-button": [
      "ion-ripple-effect"
    ],
    "ion-tab-button": [
      "ion-ripple-effect"
    ],
    "ion-toast": [
      "ion-ripple-effect"
    ]
  }
}