{
  "filePath": "./src/components/radio/radio.tsx",
  "encapsulation": "shadow",
  "tag": "ion-radio",
  "readme": "# ion-radio\n\nRadios should be used inside of an [`ion-radio-group`](../radio-group). Pressing on a radio will check it. They can also be checked programmatically by setting the value property of the parent `ion-radio-group` to the value of the radio.\n\nWhen radios are inside of a radio group, only one radio in the group will be checked at any time. Pressing a radio will check it and uncheck the previously selected radio, if there is one. If a radio is not in a group with another radio, then both radios will have the ability to be checked at the same time.\n\n\n\n",
  "docs": "Radios should be used inside of an [`ion-radio-group`](../radio-group). Pressing on a radio will check it. They can also be checked programmatically by setting the value property of the parent `ion-radio-group` to the value of the radio.\n\nWhen radios are inside of a radio group, only one radio in the group will be checked at any time. Pressing a radio will check it and uncheck the previously selected radio, if there is one. If a radio is not in a group with another radio, then both radios will have the ability to be checked at the same time.",
  "docsTags": [
    {
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use.",
      "name": "virtualProp"
    },
    {
      "text": "container - The container for the radio mark.",
      "name": "part"
    },
    {
      "text": "mark - The checkmark or dot used to indicate the checked state.",
      "name": "part"
    }
  ],
  "usage": {
    "angular": "```html\n<ion-list>\n  <ion-radio-group value=\"biff\">\n    <ion-list-header>\n      <ion-label>Name</ion-label>\n    </ion-list-header>\n\n    <ion-item>\n      <ion-label>Biff</ion-label>\n      <ion-radio slot=\"start\" value=\"biff\"></ion-radio>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Griff</ion-label>\n      <ion-radio slot=\"start\" value=\"griff\"></ion-radio>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Buford</ion-label>\n      <ion-radio slot=\"start\" value=\"buford\"></ion-radio>\n    </ion-item>\n  </ion-radio-group>\n</ion-list>\n```\n",
    "javascript": "```html\n<ion-list>\n  <ion-radio-group value=\"biff\">\n    <ion-list-header>\n      <ion-label>Name</ion-label>\n    </ion-list-header>\n\n    <ion-item>\n      <ion-label>Biff</ion-label>\n      <ion-radio slot=\"start\" value=\"biff\"></ion-radio>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Griff</ion-label>\n      <ion-radio slot=\"start\" value=\"griff\"></ion-radio>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Buford</ion-label>\n      <ion-radio slot=\"start\" value=\"buford\"></ion-radio>\n    </ion-item>\n  </ion-radio-group>\n</ion-list>\n```\n",
    "react": "```tsx\nimport React, { useState } from 'react';\nimport { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonList, IonRadioGroup, IonListHeader, IonLabel, IonItem, IonRadio, IonItemDivider } from '@ionic/react';\n\nexport const RadioExamples: React.FC = () => {\n  const [selected, setSelected] = useState<string>('biff');\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Radio Examples</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonList>\n          <IonRadioGroup value={selected} onIonChange={e => setSelected(e.detail.value)}>\n            <IonListHeader>\n              <IonLabel>Name</IonLabel>\n            </IonListHeader>\n\n            <IonItem>\n              <IonLabel>Biff</IonLabel>\n              <IonRadio slot=\"start\" value=\"biff\" />\n            </IonItem>\n\n            <IonItem>\n              <IonLabel>Griff</IonLabel>\n              <IonRadio slot=\"start\" value=\"griff\" />\n            </IonItem>\n\n            <IonItem>\n              <IonLabel>Buford</IonLabel>\n              <IonRadio slot=\"start\" value=\"buford\" />\n            </IonItem>\n          </IonRadioGroup>\n          <IonItemDivider>Your Selection</IonItemDivider>\n          <IonItem>{selected ?? '(none selected'}</IonItem>\n        </IonList>\n      </IonContent>\n    </IonPage>\n  );\n};\n```",
    "stencil": "```tsx\nimport { Component, h } from '@stencil/core';\n\n@Component({\n  tag: 'radio-example',\n  styleUrl: 'radio-example.css'\n})\nexport class RadioExample {\n  render() {\n    return [\n      <ion-list>\n        <ion-radio-group value=\"biff\">\n          <ion-list-header>\n            <ion-label>Name</ion-label>\n          </ion-list-header>\n\n          <ion-item>\n            <ion-label>Biff</ion-label>\n            <ion-radio slot=\"start\" value=\"biff\"></ion-radio>\n          </ion-item>\n\n          <ion-item>\n            <ion-label>Griff</ion-label>\n            <ion-radio slot=\"start\" value=\"griff\"></ion-radio>\n          </ion-item>\n\n          <ion-item>\n            <ion-label>Buford</ion-label>\n            <ion-radio slot=\"start\" value=\"buford\"></ion-radio>\n          </ion-item>\n        </ion-radio-group>\n      </ion-list>\n    ];\n  }\n}\n```\n",
    "vue": "```html\n<template>\n  <ion-list>\n    <ion-radio-group value=\"biff\">\n      <ion-list-header>\n        <ion-label>Name</ion-label>\n      </ion-list-header>\n\n      <ion-item>\n        <ion-label>Biff</ion-label>\n        <ion-radio slot=\"start\" value=\"biff\"></ion-radio>\n      </ion-item>\n\n      <ion-item>\n        <ion-label>Griff</ion-label>\n        <ion-radio slot=\"start\" value=\"griff\"></ion-radio>\n      </ion-item>\n\n      <ion-item>\n        <ion-label>Buford</ion-label>\n        <ion-radio slot=\"start\" value=\"buford\"></ion-radio>\n      </ion-item>\n    </ion-radio-group>\n  </ion-list>\n</template>\n\n<script>\nimport { \n  IonItem, \n  IonLabel, \n  IonList, \n  IonListHeader,\n  IonRadio, \n  IonRadioGroup\n} from '@ionic/vue';\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  components: { \n    IonItem, \n    IonLabel, \n    IonList, \n    IonListHeader,\n    IonRadio, \n    IonRadioGroup\n  }\n});\n</script>\n```\n"
  },
  "props": [
    {
      "name": "color",
      "type": "string | undefined",
      "mutable": false,
      "attr": "color",
      "reflectToAttr": false,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the radio.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "any",
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "the value of the radio.",
      "docsTags": [],
      "values": [
        {
          "type": "any"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "methods": [],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the radio button loses focus.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the radio button has focus.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the radio"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the radio"
    },
    {
      "name": "--color-checked",
      "annotation": "prop",
      "docs": "Color of the checked radio"
    },
    {
      "name": "--inner-border-radius",
      "annotation": "prop",
      "docs": "Border radius of the inner checked radio"
    }
  ],
  "slots": [],
  "parts": [
    {
      "name": "container",
      "docs": "The container for the radio mark."
    },
    {
      "name": "mark",
      "docs": "The checkmark or dot used to indicate the checked state."
    }
  ],
  "dependents": [
    "ion-select-popover"
  ],
  "dependencies": [],
  "dependencyGraph": {
    "ion-select-popover": [
      "ion-radio"
    ]
  }
}