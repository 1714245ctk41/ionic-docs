{
  "filePath": "src/components/popover/popover.tsx",
  "encapsulation": "scoped",
  "tag": "ion-popover",
  "readme": "# ion-popover\n\nA Popover is a dialog that appears on top of the current page. It can be used for anything, but generally it is used for overflow actions that don't fit in the navigation bar.\n\n### Presenting\n\nTo present a popover, call the `present` method on a popover instance. In order to position the popover relative to the element clicked, a click event needs to be passed into the options of the the `present` method. If the event is not passed, the popover will be positioned in the center of the viewport.\n\n",
  "docs": "A Popover is a dialog that appears on top of the current page. It can be used for anything, but generally it is used for overflow actions that don't fit in the navigation bar.",
  "docsTags": [
    {
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use.",
      "name": "virtualProp"
    }
  ],
  "usage": {
    "angular": "```typescript\nimport { Component } from '@angular/core';\nimport { PopoverController } from '@ionic/angular';\nimport { PopoverComponent } from '../../component/popover/popover.component';\n\n@Component({\n  selector: 'popover-example',\n  templateUrl: 'popover-example.html',\n  styleUrls: ['./popover-example.css']\n})\nexport class PopoverExample {\n  constructor(public popoverController: PopoverController) {}\n\n  async presentPopover(ev: any) {\n    const popover = await this.popoverController.create({\n      component: PopoverComponent,\n      event: ev,\n      translucent: true\n    });\n    return await popover.present();\n  }\n}\n```\n",
    "javascript": "```javascript\nfunction presentPopover(ev) {\n  const popover = Object.assign(document.createElement('ion-popover'), {\n    component: 'popover-example-page',\n    event: ev,\n    translucent: true\n  });\n  document.body.appendChild(popover);\n  return popover.present();\n}\n```\n",
    "react": "```tsx\nimport React, { useState } from 'react';\nimport { IonPopover, IonButton } from '@ionic/react';\n\nexport const PopoverExample: React.FC = () => {\n  const [showPopover, setShowPopover] = useState(false);\n\n  return (\n    <>\n      <IonPopover\n        isOpen={showPopover}\n        onDidDismiss={e => setShowPopover(false)}\n      >\n        <p>This is popover content</p>\n      </IonPopover>\n      <IonButton onClick={() => setShowPopover(true)}>Show Popover</IonButton>\n    </>\n  );\n};\n```"
  },
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the popover will animate.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "backdropDismiss",
      "type": "boolean",
      "mutable": false,
      "attr": "backdrop-dismiss",
      "reflectToAttr": false,
      "docs": "If `true`, the popover will be dismissed when the backdrop is clicked.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "component",
      "type": "Function | HTMLElement | null | string",
      "mutable": false,
      "attr": "component",
      "reflectToAttr": false,
      "docs": "The component to display inside of the popover.",
      "docsTags": [],
      "values": [
        {
          "type": "Function"
        },
        {
          "type": "HTMLElement"
        },
        {
          "type": "null"
        },
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": true
    },
    {
      "name": "componentProps",
      "type": "undefined | { [key: string]: any; }",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The data to pass to the popover component.",
      "docsTags": [],
      "values": [
        {
          "type": "undefined"
        },
        {
          "type": "{ [key: string]: any; }"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "cssClass",
      "type": "string | string[] | undefined",
      "mutable": false,
      "attr": "css-class",
      "reflectToAttr": false,
      "docs": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "string[]"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "enterAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the popover is presented.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "event",
      "type": "any",
      "mutable": false,
      "attr": "event",
      "reflectToAttr": false,
      "docs": "The event to pass to the popover animation.",
      "docsTags": [],
      "values": [
        {
          "type": "any"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "keyboardClose",
      "type": "boolean",
      "mutable": false,
      "attr": "keyboard-close",
      "reflectToAttr": false,
      "docs": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "leaveAnimation",
      "type": "((baseEl: any, opts?: any) => Animation) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the popover is dismissed.",
      "docsTags": [],
      "values": [
        {
          "type": "((baseEl: any, opts?: any) => Animation)"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "showBackdrop",
      "type": "boolean",
      "mutable": false,
      "attr": "show-backdrop",
      "reflectToAttr": false,
      "docs": "If `true`, a backdrop will be displayed behind the popover.",
      "docsTags": [],
      "default": "true",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "translucent",
      "type": "boolean",
      "mutable": false,
      "attr": "translucent",
      "reflectToAttr": false,
      "docs": "If `true`, the popover will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "dismiss",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "dismiss(data?: any, role?: string | undefined) => Promise<boolean>",
      "parameters": [],
      "docs": "Dismiss the popover overlay after it has been presented.",
      "docsTags": [
        {
          "name": "param",
          "text": "data Any data to emit in the dismiss events."
        },
        {
          "name": "param",
          "text": "role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'."
        }
      ]
    },
    {
      "name": "onDidDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<any>>",
        "docs": ""
      },
      "signature": "onDidDismiss() => Promise<OverlayEventDetail<any>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the popover did dismiss.",
      "docsTags": []
    },
    {
      "name": "onWillDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<any>>",
        "docs": ""
      },
      "signature": "onWillDismiss() => Promise<OverlayEventDetail<any>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the popover will dismiss.",
      "docsTags": []
    },
    {
      "name": "present",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "present() => Promise<void>",
      "parameters": [],
      "docs": "Present the popover overlay after it has been created.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionPopoverDidDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the popover has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionPopoverDidPresent",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the popover has presented.",
      "docsTags": []
    },
    {
      "event": "ionPopoverWillDismiss",
      "detail": "OverlayEventDetail<any>",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the popover has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionPopoverWillPresent",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the popover has presented.",
      "docsTags": []
    }
  ],
  "styles": [
    {
      "name": "--backdrop-opacity",
      "annotation": "prop",
      "docs": "Opacity of the backdrop"
    },
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the popover"
    },
    {
      "name": "--box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the popover"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the popover"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the popover"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the popover"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the popover"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the popover"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the popover"
    }
  ],
  "slots": [],
  "dependents": [],
  "dependencies": [
    "ion-backdrop"
  ],
  "dependencyGraph": {
    "ion-popover": [
      "ion-backdrop"
    ]
  }
}