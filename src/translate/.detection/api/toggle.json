{
  "filePath": "./src/components/toggle/toggle.tsx",
  "encapsulation": "shadow",
  "tag": "ion-toggle",
  "readme": "# ion-toggle\n\nToggles change the state of a single option. Toggles can be switched on or off by pressing or swiping them. They can also be checked programmatically by setting the `checked` property.\n\n## Customization\n\n### Customizing Background\n\nThe background of the toggle track and handle can be customized using CSS variables. There are also variables for setting the background differently when the toggle is checked.\n\n```css\nion-toggle {\n  --background: #000;\n  --background-checked: #7a49a5;\n\n  --handle-background: #7a49a5;\n  --handle-background-checked: #000;\n}\n```\n\nBecause these variables set the `background` property, which is a shorthand, it can accept any value that the [background property](https://developer.mozilla.org/en-US/docs/Web/CSS/background) accepts.\n\nA more complex case may involve adding an image to the handle background.\n\n```css\nion-toggle {\n  --handle-background-checked: #fff url(/assets/power-icon.png) no-repeat center / contain;\n}\n```\n\nTaking it a step further, we could use the `::before` or `::after` pseudo-elements to position text on top of the background.\n\n```css\nion-toggle::before {\n  position: absolute;\n\n  top: 16px;\n  left: 10px;\n\n  content: \"ON\";\n\n  color: white;\n  font-size: 8px;\n\n  z-index: 1;\n}\n```\n\n\n### Customizing Width\n\nAdjusting the width of the toggle **smaller** will result in a narrower track, with the handle remaining the default width. If desired, set `--handle-width` to make the handle narrower.\n\n```css\nion-toggle {\n  width: 40px;\n}\n```\n\nAdjusting the width of the toggle **larger** will result in a wider track, with the handle remaining the default width. If desired, set `--handle-width` to make the handle wider.\n\n```css\nion-toggle {\n  width: 100px;\n}\n```\n\n### Customizing Height\n\nAdjusting the height of the toggle **smaller** than the default will result in the handle height auto-sizing itself to the track. In `ios` the handle is shorter than the track (`100% - 4px`) and in `md` the handle is taller than the track (`100% + 6px`).\n\n```css\nion-toggle {\n  height: 15px;\n}\n```\n\n> Note: this does not affect the handle width, width should be set using `--handle-width`.\n\nAdjusting the height of the toggle **larger** will keep the handle in the center at the default height. This can be modified by setting `--handle-height` which can be set to any amount but will not exceed the `--handle-max-height`.\n\n```css\nion-toggle {\n  height: 60px;\n}\n```\n\n> Note: this does not affect the handle width, width should be set using `--handle-width`.\n\n### Customizing Spacing\n\nThe spacing refers to the horizontal gap between the handle and the track. By default, the handle has `2px` of spacing around it in `ios` **only**. In `md` mode there is no default spacing.\n\nTo remove the **horizontal** spacing, set `--handle-spacing` to `0px`.\n\n```css\nion-toggle {\n  --handle-spacing: 0px;\n}\n```\n\nDue to the handle having a fixed height, to remove the spacing on the top and bottom, set the height to 100%.\n\n```css\nion-toggle {\n  --handle-spacing: 0px;\n  --handle-height: 100%;\n}\n```\n\n\n### Customizing Border Radius\n\nThe `--handle-border-radius` can be used to change the `border-radius` on the handle.\n\n```css\nion-toggle {\n  --handle-border-radius: 14px 4px 4px 14px;\n}\n```\n\nTo target the `border-radius` only when the toggle is checked, target `.toggle-checked`:\n\n```css\nion-toggle.toggle-checked {\n  --handle-border-radius: 4px 14px 14px 4px;\n}\n```\n\n\n### Customizing Box Shadow\n\nThe `--handle-box-shadow` can be used to change the `box-shadow` on the handle.\n\n```css\nion-toggle {\n  --handle-box-shadow: 4px 0 2px 0 red;\n}\n```\n\nTo target the box shadow only when the toggle is checked, target `.toggle-checked`:\n\n```css\nion-toggle.toggle-checked {\n  --handle-box-shadow: -4px 0 2px 0 red;\n}\n```\n\nSee the section on [customizing overflow](#customizing-overflow) to allow the `box-shadow` to overflow the toggle container.\n\n\n### Customizing Overflow\n\nSetting `overflow` on the toggle will be inherited by the toggle handle. By default, overflow is set to `hidden` in `ios` only. The `box-shadow` will still appear cut off due to the `contain` css property. Set `contain` to `none` in order to overflow the toggle container.\n\n```css\nion-toggle {\n  --handle-box-shadow: 0 3px 12px rgba(255, 0, 0, 0.6), 0 3px 1px rgba(50, 70, 255, 0.6);\n\n  overflow: visible;\n\n  contain: none;\n}\n```\n\n",
  "docs": "Toggles change the state of a single option. Toggles can be switched on or off by pressing or swiping them. They can also be checked programmatically by setting the `checked` property.",
  "docsTags": [
    {
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use.",
      "name": "virtualProp"
    },
    {
      "text": "track - The background track of the toggle.",
      "name": "part"
    },
    {
      "text": "handle - The toggle handle, or knob, used to change the checked state.",
      "name": "part"
    }
  ],
  "usage": {
    "angular": "```html\n<!-- Default Toggle -->\n<ion-toggle></ion-toggle>\n\n<!-- Disabled Toggle -->\n<ion-toggle disabled></ion-toggle>\n\n<!-- Checked Toggle -->\n<ion-toggle checked></ion-toggle>\n\n<!-- Toggle Colors -->\n<ion-toggle color=\"primary\"></ion-toggle>\n<ion-toggle color=\"secondary\"></ion-toggle>\n<ion-toggle color=\"danger\"></ion-toggle>\n<ion-toggle color=\"light\"></ion-toggle>\n<ion-toggle color=\"dark\"></ion-toggle>\n\n<!-- Toggles in a List -->\n<ion-list>\n  <ion-item>\n    <ion-label>Pepperoni</ion-label>\n    <ion-toggle [(ngModel)]=\"pepperoni\"></ion-toggle>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Sausage</ion-label>\n    <ion-toggle [(ngModel)]=\"sausage\" disabled=\"true\"></ion-toggle>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Mushrooms</ion-label>\n    <ion-toggle [(ngModel)]=\"mushrooms\"></ion-toggle>\n  </ion-item>\n</ion-list>\n```\n",
    "javascript": "```html\n<!-- Default Toggle -->\n<ion-toggle></ion-toggle>\n\n<!-- Disabled Toggle -->\n<ion-toggle disabled></ion-toggle>\n\n<!-- Checked Toggle -->\n<ion-toggle checked></ion-toggle>\n\n<!-- Toggle Colors -->\n<ion-toggle color=\"primary\"></ion-toggle>\n<ion-toggle color=\"secondary\"></ion-toggle>\n<ion-toggle color=\"danger\"></ion-toggle>\n<ion-toggle color=\"light\"></ion-toggle>\n<ion-toggle color=\"dark\"></ion-toggle>\n\n<!-- Toggles in a List -->\n<ion-list>\n  <ion-item>\n    <ion-label>Pepperoni</ion-label>\n    <ion-toggle slot=\"end\" value=\"pepperoni\" checked></ion-toggle>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Sausage</ion-label>\n    <ion-toggle slot=\"end\" value=\"sausage\" disabled></ion-toggle>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Mushrooms</ion-label>\n    <ion-toggle slot=\"end\" value=\"mushrooms\"></ion-toggle>\n  </ion-item>\n</ion-list>\n```\n",
    "react": "```tsx\nimport React, { useState } from 'react';\nimport { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonToggle, IonList, IonItem, IonLabel, IonItemDivider } from '@ionic/react';\n\nexport const ToggleExamples: React.FC = () => {\n  const [checked, setChecked] = useState(false);\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>ToggleExamples</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonList>\n\n          <IonItemDivider>Default Toggle</IonItemDivider>\n          <IonItem>\n            <IonLabel>Checked: {JSON.stringify(checked)}</IonLabel>\n            <IonToggle checked={checked} onIonChange={e => setChecked(e.detail.checked)} />\n          </IonItem>\n\n          <IonItemDivider>Disabled Toggle</IonItemDivider>\n          <IonItem><IonToggle disabled /></IonItem>\n\n          <IonItemDivider>Checked Toggle</IonItemDivider>\n          <IonItem><IonToggle checked /></IonItem>\n\n          <IonItemDivider>Toggle Colors</IonItemDivider>\n          <IonItem><IonToggle color=\"primary\" /></IonItem>\n          <IonItem><IonToggle color=\"secondary\" /></IonItem>\n          <IonItem><IonToggle color=\"danger\" /></IonItem>\n          <IonItem><IonToggle color=\"light\" /></IonItem>\n          <IonItem><IonToggle color=\"dark\" /></IonItem>\n\n          <IonItemDivider>Toggles in a List</IonItemDivider>\n          <IonItem>\n            <IonLabel>Pepperoni</IonLabel>\n            <IonToggle value=\"pepperoni\" />\n          </IonItem>\n\n          <IonItem>\n            <IonLabel>Sausage</IonLabel>\n            <IonToggle value=\"sausage\" disabled={true} />\n          </IonItem>\n\n          <IonItem>\n            <IonLabel>Mushrooms</IonLabel>\n            <IonToggle value=\"mushrooms\" />\n          </IonItem>\n        </IonList>\n      </IonContent>\n    </IonPage>\n  );\n};\n```",
    "stencil": "```tsx\nimport { Component, State, h } from '@stencil/core';\n\n@Component({\n  tag: 'toggle-example',\n  styleUrl: 'toggle-example.css'\n})\nexport class ToggleExample {\n  @State() pepperoni: boolean = false;\n  @State() sausage: boolean = true;\n  @State() mushrooms: boolean = false;\n\n  render() {\n    return [\n      // Default Toggle\n      <ion-toggle></ion-toggle>,\n\n      // Disabled Toggle\n      <ion-toggle disabled></ion-toggle>,\n\n      // Checked Toggle\n      <ion-toggle checked></ion-toggle>,\n\n      // Toggle Colors\n      <ion-toggle color=\"primary\"></ion-toggle>,\n      <ion-toggle color=\"secondary\"></ion-toggle>,\n      <ion-toggle color=\"danger\"></ion-toggle>,\n      <ion-toggle color=\"light\"></ion-toggle>,\n      <ion-toggle color=\"dark\"></ion-toggle>,\n\n      // Toggles in a List\n      <ion-list>\n        <ion-item>\n          <ion-label>Pepperoni</ion-label>\n          <ion-toggle checked={this.pepperoni} onIonChange={(ev) => this.pepperoni = ev.detail.checked}></ion-toggle>\n        </ion-item>\n\n        <ion-item>\n          <ion-label>Sausage</ion-label>\n          <ion-toggle checked={this.sausage} onIonChange={(ev) => this.sausage = ev.detail.checked} disabled={true}></ion-toggle>\n        </ion-item>\n\n        <ion-item>\n          <ion-label>Mushrooms</ion-label>\n          <ion-toggle checked={this.mushrooms} onIonChange={(ev) => this.mushrooms = ev.detail.checked}></ion-toggle>\n        </ion-item>\n      </ion-list>,\n\n      <div>\n        Pepperoni: {this.pepperoni ? \"true\" : \"false\"}<br/>\n        Sausage: {this.sausage ? \"true\" : \"false\"}<br/>\n        Mushrooms: {this.mushrooms ? \"true\" : \"false\"}\n      </div>\n    ];\n  }\n}\n```\n",
    "vue": "```html\n<template>\n  <!-- Default Toggle -->\n  <ion-toggle></ion-toggle>\n\n  <!-- Disabled Toggle -->\n  <ion-toggle disabled></ion-toggle>\n\n  <!-- Checked Toggle -->\n  <ion-toggle checked></ion-toggle>\n\n  <!-- Toggle Colors -->\n  <ion-toggle color=\"primary\"></ion-toggle>\n  <ion-toggle color=\"secondary\"></ion-toggle>\n  <ion-toggle color=\"danger\"></ion-toggle>\n  <ion-toggle color=\"light\"></ion-toggle>\n  <ion-toggle color=\"dark\"></ion-toggle>\n\n  <!-- Toggles in a List -->\n  <ion-list>\n    <ion-item>\n      <ion-label>Pepperoni</ion-label>\n      <ion-toggle\n        @ionChange=\"toppings.push($event.target.value)\"\n        value=\"pepperoni\"\n        :checked=\"toppings.indexOf('pepperoni') !== -1\">\n      </ion-toggle>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Sausage</ion-label>\n      <ion-toggle\n        @ionChange=\"toppings.push($event.target.value)\"\n        value=\"sausage\"\n        :checked=\"toppings.indexOf('pepperoni') !== -1\"\n        disabled=\"true\">\n      </ion-toggle>\n    </ion-item>\n\n    <ion-item>\n      <ion-label>Mushrooms</ion-label>\n      <ion-toggle\n        @ionChange=\"toppings.push($event.target.value)\"\n        value=\"mushrooms\"\n        :checked=\"toppings.indexOf('pepperoni') !== -1\">\n      </ion-toggle>\n    </ion-item>\n  </ion-list>\n</template>\n```\n"
  },
  "props": [
    {
      "name": "checked",
      "type": "boolean",
      "mutable": true,
      "attr": "checked",
      "reflectToAttr": false,
      "docs": "If `true`, the toggle is selected.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "color",
      "type": "string | undefined",
      "mutable": false,
      "attr": "color",
      "reflectToAttr": false,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the toggle.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "null | string | undefined",
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the toggle does not mean if it's checked or not, use the `checked`\nproperty for that.\n\nThe value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\nit's only used when the toggle participates in a native `<form>`.",
      "docsTags": [],
      "default": "'on'",
      "values": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    }
  ],
  "methods": [],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the toggle loses focus.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "ToggleChangeEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the value property has changed.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the toggle has focus.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the toggle"
    },
    {
      "name": "--background-checked",
      "annotation": "prop",
      "docs": "Background of the toggle when checked"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the toggle track"
    },
    {
      "name": "--handle-background",
      "annotation": "prop",
      "docs": "Background of the toggle handle"
    },
    {
      "name": "--handle-background-checked",
      "annotation": "prop",
      "docs": "Background of the toggle handle when checked"
    },
    {
      "name": "--handle-border-radius",
      "annotation": "prop",
      "docs": "Border radius of the toggle handle"
    },
    {
      "name": "--handle-box-shadow",
      "annotation": "prop",
      "docs": "Box shadow of the toggle handle"
    },
    {
      "name": "--handle-height",
      "annotation": "prop",
      "docs": "Height of the toggle handle"
    },
    {
      "name": "--handle-max-height",
      "annotation": "prop",
      "docs": "Maximum height of the toggle handle"
    },
    {
      "name": "--handle-spacing",
      "annotation": "prop",
      "docs": "Horizontal spacing around the toggle handle"
    },
    {
      "name": "--handle-transition",
      "annotation": "prop",
      "docs": "Transition of the toggle handle"
    },
    {
      "name": "--handle-width",
      "annotation": "prop",
      "docs": "Width of the toggle handle"
    }
  ],
  "slots": [],
  "parts": [
    {
      "name": "handle",
      "docs": "The toggle handle, or knob, used to change the checked state."
    },
    {
      "name": "track",
      "docs": "The background track of the toggle."
    }
  ],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}